1 
duplicate array of N+1 integers.
i/p n=5 (so N+1 element in array)
arr=1 2 2 3 4 4
o/p 2||4 or return -1 if not;
soln
brute force-N^2
sort and then traverse and compare adjacent -NlogN
hashing - N time and N space
optm soln=
use index as there are limited elements
while traversing 
if(arr[arr[i]])is -ve then index is duplicate element return i;
else mark arr[arr[i]]=-(arr[arr[i]);
return -1;//if no dup found.


2
Sort 0,1,2

i/p= 0,1,1,2,0,2,1,0,2,2,1
o/p= 0 0 0 1 1 1 1 2 2 2 2
soln= 2 traverse only
count frequencies of all 3 in single traverse
and print all value as per their freq respectively.

optmz soln= take 3 pointer low=0,mid=0,high=n-1;
while(mid<=high)
if(a[mid]==0)swap(a[low],a[mid])
low++,mid++;
else if(a[mid]==1)
mid++;
else swap(a[mid],a[high])
high--;


3
 repeat and missing number.
i/p= 1 2 5 3 3 
o/p miss=4, repeat=3
soln
optm= 
for(i =0 to n-1)
if(a[absa[i]]>0) mark a[absa[i]]=-a[absa[i]];
else print a[i]//duplicate
exit
 for(i 0 to n-1) if(a[i]>0) print i+1; missing

4
merge two sorted array without extra space
i/p= a= 2 4 1 4 6 b= 0 3 2 5
o/p= 0 1 1 1 3 4 4 5 6
optmz soln
int m=a.len,n=b.len;
 int[] c=new int[n];
  while(i<m||j<n){
   if(a[i]<=b[j])c[k++]=a[i++];
    else c[k++]=b[j++];
  }
 while(i<m) c[k++]=a[i++];
   while(j<n)c[k++]=b[j++];
   
Time-O(n)+O(m)== O(max(n,m));
space n+m;
  
5
   kadane algo 
  find max contigous array sum.
i/p 2 5 -14 3 5 -2 10
o/p 16
brute force 
compare sum of all subarrays (N^2)
optmz soln
   if( max in array <=0) return max;
   int maxsofar=0,res=0;
  for(i=0 to n-1){
  if(maxsofar+a[i]>0)maxsofar+=a[i];
   else maxsofar=0;
     res=max(maxsofar,res)
  }
 return res;
 
6
  max circular subarray sum
   Input: a[] = {8, -8, 9, -9, 10, -11, 12}
 Output: 22 (12 + 8 - 8 + 9 - 9 + 10)

  Input: a[] = {10, -3, -4, 7, 6, 5, -4, -1} 
   Output:  23 (7 + 6 + 5 - 4 -1 + 10) 
optm sol
  maxcirc(arr,n){
int kad=kadane(arr,n);
for(i=0 to n-1)
arr[i]=-arr[i]'
int negkad=kadane(arr,n);// if we find max of negative array thn we should able to find max circular array by removing this patch from aray;
 return max(kad,negkad+sum(arr));//sum(arr) return sum of arr;

7
 merge ovelapping subintervals   
  Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]
        vector<vector<int>> merge(vector<vector<int>>& in) {
        if(in.size()<=1)return in;
        sort(in.begin(),in.end());
        vector<vector<int>> res;
        res.push_back(in[0]);
      for(int i=1;i<in.size();i++){
          vector<int> temp=res.back();
          if(temp[0]<=in[i][0]&&temp[1]>=in[i][0]){
              temp[0]=min(temp[0],in[i][0]);
              temp[1]=max(temp[1],in[i][1]);
              res.pop_back();
              res.push_back(temp);      
          }
          else{
              res.push_back(in[i]);
          }
      }
        return res;
    }


8  
 Set Matrix Zeroes
   ip-given a N*N matrix and in matrix whenever you find 0 then set all element in that row and that column 0;
   1 1 1
   1 0 1
   1 1 1
  op-
   1 0 1
   0 0 0
   1 0 1
 Optmz soln-
 use first row and first column as extra memory to solve inplace
  
 input mat,row,col;
  bool colflg=rowflg=false;
// chck whether there exist some zeroes in first row and col itself
   for(int i=0;i<row;i++){
    for(int j=0;j<col;j++)
     if(i==0 && mat[i][j]==0) rowflg=true;
     if(j==0&& mat[i][j]==0)colflg=true;}

   
   for(int i=0;i<row;i++){
    for(int j=0;j<col;j++){
       if(mat[i][j]==0)
          mat[i][0]=0;
          mat[0][j]=0;
      }
    }
   
   
   for(int i=1;i<row;i++){
    for(int j=1;j<col;j++){
     if(mat[i][0]||mat[0][j]==0)
           mat[i][j]=0;
  }
}
  if(rowflg)
  for(int i=0;i<col;i++)
   mat[0][i]=0;
   if(colflg)
   for(int i=0;i<row;i++)
  mat[i][0]=0;



9.
      Pascal Triangle
       Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]      

     vector<vector<int>> generate(int num) {
        vector<vector<int>> res(num);
        
        for(int i=0;i<num;i++){
            res[i].resize(i+1);
            res[i][0]=res[i][i]=1;
            for(int j=1;j<i;j++){
                res[i][j]=res[i-1][j-1]+res[i-1][j];
            }
        }
         
        return res;
    }


10.
     Next Permutation

   Your input
  [1,2,5,4,3]
   Output
  [1,3,2,4,5]
   
      1) An sequence sorted in descending order does not have next permutation. For example edcba” does not have next permutation.
2) For a sequence which is not sorted in descending order for example “abedc”, we can follow below steps.
……….a) Traverse from right and find the first item that is not following the descending order. For example in “abedc”, the character ‘b’ does not follow the descending order.
……….b) Swap the found character with closest greater (or smallest greater) element on right side of it. In case of “abedc”, we have ‘c’ as the closest greater element. After swapping ‘b’ and ‘c’, string becomes “acedb”.
……….c) After swapping, sort the string after the position of character found in step a. After sorting the substring “edb” of “acedb”, we get “acbde” which is the required next permutation.

Optimizations in step b) and c)
a) Since the sequence is sorted in decreasing order, we can use binary search to find the closest greater element.
c) Since the sequence is already sorted in decreasing order (even after swapping as we swapped with the closest greater), we can get the sequence sorted (in increasing order) after reversing it.



     

     public : void swap(int *a,int *b){
        if (*a == *b) 
        return; 
    *a ^= *b; 
    *b ^= *a; 
    *a ^= *b; 

    }
    public:
    int bsearch(vector<int>& s,int l,int r,int key){
        int index = -1; 
    while (l <= r) { 
        int mid = l + (r - l) / 2; 
        if (s[mid] <= key) 
            r = mid - 1; 
        else { 
            l = mid + 1; 
            if (index == -1 || s[index] >= s[mid]) 
                index = mid; 
        } 
    } 
    return index;
    }
    public:
       void rev(vector<int>& arr,int l,int r){
           while (l < r) 
         swap(&arr[l++], &arr[r--]); 

       }
public:
    void nextPermutation(vector<int>& arr) {
        if(arr.size()==0 )return;
        int n=arr.size();
        int i=n-2;
        while(i>=0&& arr[i]>=arr[i+1]){
            i--;
        }
        if(i<0){
            reverse(arr.begin(),arr.end());
            return;
        }
        
        int ind=bsearch(arr,i+1,n-1,arr[i]);
        swap(&arr[i],&arr[ind]);
        rev(arr,i+1,n-1);
    }




11)
     COUNT INVERSION IN AN ARRAY(MERGE SORT)(OPTMIED SOLN)

     Input: arr[] = {8, 4, 2, 1}
Output: 6

Explanation: Given array has six inversions:
(8,4), (4,2),(8,2), (8,1), (4,1), (2,1).


  // C++ program to Count 
// Inversions in an array 
// using Merge Sort 
#include <bits/stdc++.h> 
using namespace std; 

int _mergeSort(int arr[], int temp[], int left, int right); 
int merge(int arr[], int temp[], int left, int mid, int right); 

/* This function sorts the input array and returns the 
number of inversions in the array */
int mergeSort(int arr[], int array_size) 
{ 
	int temp[array_size]; 
	return _mergeSort(arr, temp, 0, array_size - 1); 
} 

/* An auxiliary recursive function that sorts the input array and 
returns the number of inversions in the array. */
int _mergeSort(int arr[], int temp[], int left, int right) 
{ 
	int mid, inv_count = 0; 
	if (right > left) { 
		/* Divide the array into two parts and 
		call _mergeSortAndCountInv() 
		for each of the parts */
		mid = (right + left) / 2; 

		/* Inversion count will be sum of 
		inversions in left-part, right-part 
		and number of inversions in merging */
		inv_count += _mergeSort(arr, temp, left, mid); 
		inv_count += _mergeSort(arr, temp, mid + 1, right); 

		/*Merge the two parts*/
		inv_count += merge(arr, temp, left, mid + 1, right); 
	} 
	return inv_count; 
} 

/* This funt merges two sorted arrays 
and returns inversion count in the arrays.*/
int merge(int arr[], int temp[], int left, 
		int mid, int right) 
{ 
	int i, j, k; 
	int inv_count = 0; 

	i = left; /* i is index for left subarray*/
	j = mid; /* j is index for right subarray*/
	k = left; /* k is index for resultant merged subarray*/
	while ((i <= mid - 1) && (j <= right)) { 
		if (arr[i] <= arr[j]) { 
			temp[k++] = arr[i++]; 
		} 
		else { 
			temp[k++] = arr[j++]; 

			/* this is tricky -- see above 
			explanation/diagram for merge()*/
			inv_count = inv_count + (mid - i); 
		} 
	} 

	/* Copy the remaining elements of left subarray 
(if there are any) to temp*/
	while (i <= mid - 1) 
		temp[k++] = arr[i++]; 

	/* Copy the remaining elements of right subarray 
(if there are any) to temp*/
	while (j <= right) 
		temp[k++] = arr[j++]; 

	/*Copy back the merged elements to original array*/
	for (i = left; i <= right; i++) 
		arr[i] = temp[i]; 

	return inv_count; 
} 

// Driver code 
int main() 
{ 
	int arr[] = { 1, 20, 6, 4, 5 }; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	int ans = mergeSort(arr, n); 
	cout << " Number of inversions are " << ans; 
	return 0; 
} 


12.
   Stock Buy And Sell 
   , if the given array is {100, 180, 260, 310, 40, 535, 695}, the maximum profit can earned by buying on day 0, selling on day 3. 
    Again buy on day 4 and sell on day 6. 
   If the given array of prices is sorted in decreasing order, then profit cannot be earned at all.

    stockBuy(int ar[],int n){
     int i=0;
    int buy,sell;
   while(i<n-1){

   while(i<n-1&&ar[i+1]<=ar[i])
    i++;
   
  if(i==n-1) break;
   buy=i++;
   
  while(i<n && ar[i]>=ar[i-1])
   i++;
  sell=i-1;   
  
 print buy and sell;
 
  }
}


13
 rotate matrix 90 degree
   
   ip 1 2 3   op 3 6 9   
      4 5 6      2 5 8
      7 8 9      1 4 7

  optimize solution --
     first traspose the matrix 
    a[i][j]=a[j][i]
      and then reverse the matrix columwise
       means swap 0th column with n-1 . 1 with n-1 2 with n-3 and so on...

  DAY -3


14 

       SEARCH IN A 2-D MATRIX(SORTED ROW COLUMN WISE)
   given a key find index in matrix
  
 Brute force- normal traversing of matrix and find element---- N^2
 optmz soln
  
  start from top right corner until it reach less than mat[0][0] or succed mat[n-1][n-1] //far ends 
  if(key >mat[i][j]){
    //move down 
   i++;)
  else if(key< mat[i][j]){
  //move left
  j--;}
  else if(==)
  print;
  another optm soln
   binary search 

    bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){
    if( matrixSize  == 0 ) return false;
    int lo = 0;
    int clm = matrixColSize[0];
    int hi =  clm * matrixSize - 1;
    
    while(lo <= hi) {
        int mid = lo + (hi - lo)/2;
        int rw = mid / clm;
        int cl = mid % clm;
        if(matrix[rw][cl] == target) return true;
        if(matrix[rw][cl] > target) hi = mid - 1;
        else lo = mid + 1;
    }
    return false;
}

15   POW(X,N)
 
 double power(double x,long long n)
    {
        if(n==0) return 1;
        if(n==1||x==1) return x;
        
        if(n%2==0) 
        {
            double y=power(x,n/2);
            return y*y;
        }
        else
        {
            return x*power(x,n-1);
        }
    }
    
public:
    double myPow(double x, int n) {
        
        double ans= power(x,(long long)abs(n));
        
        if(n<0) return 1/ans;
        else return ans;
    }


16 UNIQUE PATHS IN 2-D GRID


   Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right

soln optm dp-
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(n,vector<int>(m,0));
        
        for(int i=0;i<n;i++){
            
            for(int j=0;j<m;j++){
                if(i==0||j==0)dp[i][j]=1;
                else
            dp[i][j]=dp[i-1][j]+dp[i][j-1];    
            }
        }
        return dp[n-1][m-1];
        
    }


17   REVERSE PAIR(HARD)


  Given an array nums, we call (i, j) an important reverse pair if i < j and nums[i] > 2*nums[j].

You need to return the number of important reverse pairs in the given array.

Example1:

Input: [1,3,2,3,1]
Output: 2
Example2:

Input: [2,4,3,5,1]
Output: 3


    class Solution {
    public int reversePairs(int[] nums) {
        int n = nums.length;
        return mergeSort(nums, 0, n - 1);
    }
    
    private int mergeSort(int[] nums, int i, int j) {
        if (i >= j) {
            return 0;
        }
        int mid = i + (j - i) / 2;
        int sum = 0;
        sum += mergeSort(nums, i, mid);
        sum += mergeSort(nums, mid + 1, j);
        sum += merge(nums, i, mid, mid + 1, j);
        return sum;
    }
    
    private int merge(int[] nums, int start1, int end1, int start2, int end2) {
        int[] temp = new int[end2 - start1 + 1];
        int start = start1;
        int i = 0; 
        int sum = 0;
        int s1 = start1;
        int e1 = end1;
        int s2 = start2;
        int e2 = end2;
        while (s1 <= e1 && s2 <= e2) {
            if ((long)nums[s1] > (long)(nums[s2]) * 2) {
                sum += e2 - s2 + 1;
                s1++;
            }
            else {
                s2++;
            }
        }
        while (start1 <= end1 && start2 <= end2) {
            if (nums[start1] > nums[start2]) {
                temp[i++] = nums[start1++];
            }
            else {
                temp[i++] = nums[start2++];
            }
        }
        while (start1 <= end1) {
            temp[i++] = nums[start1++];
        }
        while (start2 <= end2) {
            temp[i++] = nums[start2++];
        }
        for (int j = 0; j < temp.length; j++) {
            nums[start++] = temp[j];
        }
        return sum;        
    }
}

 


   